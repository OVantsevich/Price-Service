// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	model "Price-Service/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MQ is an autogenerated mock type for the MQ type
type MQ struct {
	mock.Mock
}

// GetPrices provides a mock function with given fields: ctx, count, start
func (_m *MQ) GetPrices(ctx context.Context, count int64, start string) ([][]*model.Price, string, int, error) {
	ret := _m.Called(ctx, count, start)

	var r0 [][]*model.Price
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) [][]*model.Price); ok {
		r0 = rf(ctx, count, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]*model.Price)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) string); ok {
		r1 = rf(ctx, count, start)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, int64, string) int); ok {
		r2 = rf(ctx, count, start)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, int64, string) error); ok {
		r3 = rf(ctx, count, start)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewMQ interface {
	mock.TestingT
	Cleanup(func())
}

// NewMQ creates a new instance of MQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMQ(t mockConstructorTestingTNewMQ) *MQ {
	mock := &MQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
