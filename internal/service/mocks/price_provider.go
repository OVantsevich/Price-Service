// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/OVantsevich/Price-Service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PriceProvider is an autogenerated mock type for the PriceProvider type
type PriceProvider struct {
	mock.Mock
}

// GetCurrentPrices provides a mock function with given fields: ctx, names
func (_m *PriceProvider) GetCurrentPrices(ctx context.Context, names []string) (map[string]*model.Price, error) {
	ret := _m.Called(ctx, names)

	var r0 map[string]*model.Price
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]*model.Price); ok {
		r0 = rf(ctx, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Price)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPriceProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceProvider creates a new instance of PriceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceProvider(t mockConstructorTestingTNewPriceProvider) *PriceProvider {
	mock := &PriceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
